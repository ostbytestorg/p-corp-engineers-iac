name: Configure AKS Cluster

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      argo_admin_group_id:
        description: "Argo Admin Group name (this group will be granted admin access in ArgoCD)"
        required: true
        default: "grp-aks-admin"

jobs:
  configure-kube:
    runs-on:
      group: vnet-spoke-production-engineers
    environment: Production-plan
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Azure Login (Federated credentials)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.CLIENTID }}
          tenant-id: ${{ vars.TENANTID }}
          allow-no-subscriptions: true

      - name: Set AKS Context
        uses: azure/aks-set-context@v4
        with:
          cluster-name: aksostbyengineeering001
          resource-group: rg-tf-aks

      - name: Install kubelogin
        run: |
          echo "Downloading kubelogin..."
          curl -L -o kubelogin.zip https://github.com/Azure/kubelogin/releases/download/v0.2.7/kubelogin-linux-amd64.zip
          unzip kubelogin.zip
          chmod +x bin/linux_amd64/kubelogin
          sudo mv bin/linux_amd64/kubelogin /usr/local/bin/kubelogin
          kubelogin --version

      - name: Convert kubeconfig for noninteractive login using azurecli mode
        run: |
          echo "Converting kubeconfig to noninteractive azurecli mode..."
          kubelogin convert-kubeconfig --login azurecli

      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      # --- ArgoCD AAD (OIDC) Authentication Configuration Steps ---

      - name: Wait for ArgoCD Server to be Ready
        run: |
          echo "Waiting for ArgoCD pods to be ready..."
          kubectl -n argocd rollout status deploy/argocd-server --timeout=300s

      - name: Add lb and publicIP to ArgoCD
        run: |
          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

      - name: Get ArgoCD Public IP and Construct ARGOCD_SERVER_URL
        id: get-argocd-ip
        run: |
          external_ip=""
          while [ -z "$external_ip" ]; do
            echo "Waiting for external IP..."
            external_ip=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            [ -z "$external_ip" ] && sleep 10
          done
          echo "ArgoCD Public IP: $external_ip"
          echo "ARGOCD_SERVER_IP=$external_ip" >> $GITHUB_ENV
          echo "ARGOCD_SERVER_URL=https://argo.middagsklubben.beer" >> $GITHUB_ENV

      - name: Update or Create DNS A Record
        run: |
          # Check if the A record exists
          echo "Checking for existing DNS record..."
          DNS_ZONE="middagsklubben.beer"
          DNS_RECORD_NAME="argo"
          RESOURCE_GROUP="rg-tf-dns"
          
          record_exists=$(az network dns record-set a list \
            --resource-group $RESOURCE_GROUP \
            --zone-name $DNS_ZONE \
            --query "[?name=='$DNS_RECORD_NAME']" \
            --output tsv)
          
          if [ -z "$record_exists" ]; then
            echo "Creating new DNS A record..."
            az network dns record-set a add-record \
              --resource-group $RESOURCE_GROUP \
              --zone-name $DNS_ZONE \
              --record-set-name $DNS_RECORD_NAME \
              --ipv4-address ${{ env.ARGOCD_SERVER_IP }}
          else
            echo "Updating existing DNS A record..."
            az network dns record-set a update \
              --resource-group $RESOURCE_GROUP \
              --zone-name $DNS_ZONE \
              --name $DNS_RECORD_NAME \
              --set "aRecords[0].ipv4Address=${{ env.ARGOCD_SERVER_IP }}"
          fi
          
          echo "DNS record for argo.middagsklubben.beer now points to ${{ env.ARGOCD_SERVER_IP }}"

      - name: Validate Cluster Connectivity and ARGO config
        run: |
          kubectl get nodes
          kubectl get svc -n argocd argocd-server

      - name: Patch ArgoCD ConfigMap for Dex Configuration (Entra SSO)
        env:
          ARGO_TENANT_ID: ${{ secrets.ARGO_TENANT_ID }}
          ARGO_CLIENT_ID: ${{ secrets.ARGO_CLIENT_ID }}
          ARGO_CLIENT_SECRET: ${{ secrets.ARGO_CLIENT_SECRET }}
          ARGOCD_SERVER_URL: ${{ env.ARGOCD_SERVER_URL }}
        run: |
          cat <<EOF > patch.json
          {
            "data": {
              "dex.config": "connectors:\n- type: microsoft\n  id: microsoft\n  name: Your Company GmbH\n  config:\n    clientID: \"${ARGO_CLIENT_ID}\"\n    clientSecret: \"${ARGO_CLIENT_SECRET}\"\n    redirectURI: \"${ARGOCD_SERVER_URL}/api/dex/callback\"\n    tenant: \"${ARGO_TENANT_ID}\"\n",
              "url": "${ARGOCD_SERVER_URL}"
            }
          }
          EOF
          kubectl patch configmap argocd-cm -n argocd -p "$(cat patch.json)"

      - name: Configure ArgoCD RBAC for Azure AD SSO
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-rbac-cm
            namespace: argocd
          data:
            policy.csv: |
              p, role:readonly, applications, get, */*, allow
              p, role:admin, *, *, *, allow
              g, ${{ github.event.inputs.argo_admin_group_id }}, role:admin
          EOF
      - name: Create ArgoCD Infrastructure App
        run: |
            cat <<EOF | kubectl apply -f -
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              name: cluster-infrastructure
              namespace: argocd
            spec:
              project: default
              source:
                repoURL: https://github.com/ostbytestorg/p-corp-engineers-iac.git
                targetRevision: HEAD
                path: ARGOCD/infrastructure
              destination:
                server: https://kubernetes.default.svc
                namespace: argocd
              syncPolicy:
                automated:
                  prune: true
                  selfHeal: true
                syncOptions:
                - CreateNamespace=true
            EOF