name: Configure AKS Cluster

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      argo_admin_group_id:
        description: "Argo Admin Group name (this group will be granted admin access in ArgoCD)"
        required: true
        default: "grp-aks-admin"

jobs:
  configure-kube:
    runs-on:
      group: vnet-spoke-production-engineers
    environment: Production-plan
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Azure Login (Federated credentials)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.CLIENTID }}
          tenant-id: ${{ vars.TENANTID }}
          allow-no-subscriptions: true
      - name: Install ArgoCD CLI
        run: |
            curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x argocd
            sudo mv argocd /usr/local/bin/
      - name: Set AKS Context
        uses: azure/aks-set-context@v4
        with:
          cluster-name: aksostbyengineeering001
          resource-group: rg-tf-aks

      - name: Install kubelogin
        run: |
          echo "Downloading kubelogin..."
          curl -L -o kubelogin.zip https://github.com/Azure/kubelogin/releases/download/v0.2.7/kubelogin-linux-amd64.zip
          unzip kubelogin.zip
          chmod +x bin/linux_amd64/kubelogin
          sudo mv bin/linux_amd64/kubelogin /usr/local/bin/kubelogin
          kubelogin --version

      - name: Convert kubeconfig for noninteractive login using azurecli mode
        run: |
          echo "Converting kubeconfig to noninteractive azurecli mode..."
          kubelogin convert-kubeconfig --login azurecli

      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Wait for ArgoCD Server to be Ready
        run: |
          echo "Waiting for ArgoCD pods to be ready..."
          kubectl -n argocd rollout status deploy/argocd-server --timeout=300s    

      - name: Configure ArgoCD Repository
        env:
          GITHUB_APP_ID: ${{ secrets.GITHUB_APP_ID }}
          GITHUB_INSTALLATION_ID: ${{ secrets.GITHUB_INSTALLATION_ID }}
          GITHUB_PRIVATE_KEY: ${{ secrets.GITHUB_PRIVATE_KEY }}
        run: |
            # Get admin password
            ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
            
            # Login to ArgoCD
            argocd login localhost:8080 --username admin --password "$ADMIN_PASSWORD" --insecure
            
            # Save GitHub App private key to a temporary file
            echo "$GITHUB_PRIVATE_KEY" > /tmp/github-private-key.pem
            
            # Add repository to ArgoCD
            argocd repo add https://github.com/your-org/your-repo \
              --name p-engineers-apps \
              --type git \
              --github-app-id $GITHUB_APP_ID \
              --github-app-installation-id $GITHUB_INSTALLATION_ID \
              --github-app-private-key-path /tmp/github-private-key.pem
            
            # Verify repository connection
            argocd repo list
  
      - name: Cleanup
        if: always()
        run: |
            # Kill the port-forward process
            if [ -n "$PORT_FORWARD_PID" ]; then
              kill $PORT_FORWARD_PID || true
            fi
            
            # Remove any temporary files
            rm -f /tmp/github-private-key.pem