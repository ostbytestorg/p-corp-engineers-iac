name: Deploy AKS & ACR via Terraform

permissions:
  id-token: write
  contents: read

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths: 
        - "TF/AKS/**"
  push:
    branches: [ main ]
    paths: 
        - "TF/AKS/**"

  workflow_dispatch:

jobs:
  azure-login:
    runs-on:
      group: vnet-spoke-production-engineers
    environment: Production-plan
    steps:
      - name: Azure Login (Federated credentials)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.CLIENTID }}
          tenant-id: ${{ vars.TENANTID }}
          enable-AzPSSession: true
          allow-no-subscriptions: true

  terraform:
    needs: azure-login
    uses: ostbytestorg/tf-buildtemplate/.github/workflows/tf-plan-apply.yml@main
    with:
      tfDirectory: "./TF/AKS"
      jobEnvironment: "Production-plan"
      tfStateKey: "aks.tfstate"

  configure-kube:
    needs: terraform
    # Only run this job when the event is a push to 'main' or on workflow dispatch
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    runs-on:
      group: vnet-spoke-production-engineers
    environment: Production-plan
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Azure Login (Federated credentials)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.CLIENTID }}
          tenant-id: ${{ vars.TENANTID }}
          allow-no-subscriptions: true
      # Set AKS context using the official Azure action
      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          cluster-name: aksostbyengineeering001
          resource-group: rg-tf-aks
      # Install kubelogin so that AAD authentication can work properly.
      - name: Install kubelogin
        run: |
          echo "Downloading kubelogin..."
          curl -L -o kubelogin.zip https://github.com/Azure/kubelogin/releases/download/v0.0.28/kubelogin-linux-amd64.zip
          unzip kubelogin.zip
          chmod +x bin/linux_amd64/kubelogin
          sudo mv bin/linux_amd64/kubelogin /usr/local/bin/kubelogin
          kubelogin version
      # Now that the context is set, install ArgoCD
      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd || true
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Validate Cluster Connectivity
        run: kubectl get nodes